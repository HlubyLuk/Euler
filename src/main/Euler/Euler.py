# coding: UTF-8

'''
Created on Mar 31, 2019

@see: https://projecteuler.net/
@author: hlubyluk
'''


def problem1():
    '''
    Multiples of 3 and 5
    Problem 1
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    '''
    return sum([x for x in range(1, 1000) if x % 3 == 0 or x % 5 == 0])


def problem2():
    '''
    Even Fibonacci numbers
    Problem 2
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    '''
    fibonacci = [1, 2]
    while True:
        fibonacci_next = fibonacci[-2] + fibonacci[-1]
        if fibonacci_next >= 4000000:
            break
        fibonacci.append(fibonacci_next)
    return sum(filter(lambda item: item % 2 == 0, fibonacci))


def problem3():
    '''
    Largest prime factor

    Problem 3
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143?
    '''
    number, now = 600851475143, 2
    while number > 1:
        if number % now == 0:
            number /= now
        else:
            now += 1
    return now


def is_palindrome(items):
    return items == items[::-1]


def problem4():
    '''
    Largest palindrome product

    Problem 4
    A palindromic number reads the same both ways.
    The largest palindrome made from the product of two 2-digit numbers
    is 9009 = 91 × 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    '''
    return sorted([a * b for a in range(100, 1001) for b in range(100, 1001)
                  if is_palindrome(str(a * b))])[-1]


def problem5():
    '''
    Smallest multiple

    Problem 5
    2520 is the smallest number that can be divided by each of the numbers
    from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by
    all of the numbers from 1 to 20?
    '''
    cache = dict()
    for x in range(2, 20 + 1):
        for k, v in prime_factorization(x).items():
            tmp = cache.get(k, 0)
            cache[k] = max(tmp, v)
    return reduce(mul, map(pow_tupple, cache.items()))


def prime_factorization(number):
    cache = dict()

    factor = 2
    x = number

    while x > 1:
        if x % factor == 0:
            tmp = cache.get(factor, 0)
            cache[factor] = tmp + 1
            x //= factor
        else:
            factor += 1

    return cache


def mul(a, b): return a * b


def pow_tupple(a): return a[0] ** a[1]


def problem6():
    '''
    Sum square difference

    Problem 6
    The sum of the squares of the first ten natural numbers is,

    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,

    (1 + 2 + ... + 10)^2 = 552 = 3025
    Hence the difference between the sum of the squares of the
    first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

    Find the difference between the sum of the squares of
    the first one hundred natural numbers and the square of the sum.
    '''
    r = range(1, 101)
    return pow_fun(sum(r), 2) - sum(map(lambda a: pow_fun(a, 2), r))


def pow_fun(a, b): return a ** b


def problem7():
    '''
    10001st prime

    Problem 7
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
    we can see that the 6th prime is 13.

    What is the 10 001st prime number?
    '''
    count, i = 0, 1
    while True:
        count += (0, 1)[is_prime(i)]
        if count == 10001:
            return i
        i += 1

    return 0


def is_prime(n):
    if n < 2:
        return False

    if n == 2:
        return True

    if n % 2 == 0:
        return False

    tmp = 3
    while tmp * tmp <= n:
        if n % tmp == 0:
            return False

        tmp += 2

    return True


def problem8():
    '''
    Largest product in a series

    Problem 8
    The four adjacent digits in the 1000-digit number that
    have the greatest product are 9 × 9 × 8 × 9 = 5832.

    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450

    Find the thirteen adjacent digits in the 1000-digit number that
    have the greatest product. What is the value of this product?
    '''
    number = '''73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
    '''
    n = map(lambda a: ord(a) - ord('0'), list(number.replace("\n", "")))
    return max([reduce(mul, n[a:a + 13]) for a in range(len(n) - 13)])


def problem9():
    '''
    Special Pythagorean triplet

    Problem 9
    A Pythagorean triplet is a set of three natural numbers,
    a < b < c, for which,

    a^2 + b^2 = c^2
    For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    '''
    limit = 1000
    for a in range(1, limit):
        for b in range(a + 1, limit - a):
            c = limit - a - b
            if a ** 2 + b ** 2 == c ** 2 and a < b and b < c:
                return a * b * c
    return 0


def problem10():
    '''
    Summation of primes

    Problem 10
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

    Find the sum of all the primes below two million.
    '''
    sieve_enum = enumerate(eratosthenes_sieve(2000000))
    sieve_filtered = filter(lambda i:not i[1], sieve_enum)
    primes = map(lambda a: a[0], sieve_filtered)
    return sum(primes)


def eratosthenes_sieve(limit):
    sieve, idx = [False] * (limit + 1), 2
    sieve[0] = sieve[1] = True

    while idx * idx < limit:
        for i in range(idx * 2, limit + 1, idx):
            sieve[i] = True

        while True:
            idx += 1

            if not sieve[idx]:
                break

    return sieve


def problem11():
    '''
    Largest product in a grid

    Problem 11
    In the 20×20 grid below, four numbers along a diagonal line
    have been marked in red.

    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

    What is the greatest product of four adjacent numbers
    in the same direction (up, down, left, right, or diagonally)
    in the 20×20 grid?
    '''
    matrix = map(lambda f: int(f), '''
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'''.split())
    e_m, e_s_m = 20, 4

    def row(matrix):
        return [reduce(mul, matrix[i:i + e_s_m:])
                for i in range(e_m * e_m - e_s_m + 1)]

    def column(matrix):
        return [reduce(mul, matrix[i::e_m][j:j + e_s_m:])
                       for i in range(e_m)
                       for j in range(e_m - e_s_m + 1)]

    def other(matrix):

        def compose(rows):
            return [rows[i + k][j + k]
             for i in range(e_m - e_s_m + 1)
             for j in range(e_m - e_s_m + 1)
             for k in range(e_s_m)]

        return diagonal_result(compose(rows(matrix)))

    def main(matrix):

        def compose(rows):
            return [rows[i - e_s_m + k][j - k - 1]
                    for i in range(e_s_m, e_m + 1)
                    for j in range(e_s_m, e_m + 1)
                    for k in range(e_s_m)]

        return diagonal_result(compose(rows(matrix)))

    def rows(matrix):
        return [matrix[i * e_m:i * e_m + e_m:] for i in range(e_m)]

    def diagonal_result(composed):
        return [reduce(mul, composed[i:i + e_s_m:])
                for i in range(len(composed))]

    t = []
    t.extend(main(matrix))
    t.extend(column(matrix))
    t.extend(other(matrix))
    t.extend(main(matrix))
    return max(t)


def problem12():
    '''
    Highly divisible triangular number

    Problem 12
    The sequence of triangle numbers is generated by adding
    the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over
    five hundred divisors?
    '''
    n = t = 1
    while True:
        if factors_count(t) < 500:
            n += 1
            t += n
        else:
            return t
    return 0


def factors_count(i):
    x, c = 1, 0
    while True:
        if x ** 2 > i:
            break
        elif i % x == 0:
            c += 1
        x += 1
    return c * 2


def problem13():
    '''
    Large sum

    Problem 13
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

    37107287533902102798797998220837590246510135740250
    46376937677490009712648124896970078050417018260538
    74324986199524741059474233309513058123726617309629
    91942213363574161572522430563301811072406154908250
    23067588207539346171171980310421047513778063246676
    89261670696623633820136378418383684178734361726757
    28112879812849979408065481931592621691275889832738
    44274228917432520321923589422876796487670272189318
    47451445736001306439091167216856844588711603153276
    70386486105843025439939619828917593665686757934951
    62176457141856560629502157223196586755079324193331
    64906352462741904929101432445813822663347944758178
    92575867718337217661963751590579239728245598838407
    58203565325359399008402633568948830189458628227828
    80181199384826282014278194139940567587151170094390
    35398664372827112653829987240784473053190104293586
    86515506006295864861532075273371959191420517255829
    71693888707715466499115593487603532921714970056938
    54370070576826684624621495650076471787294438377604
    53282654108756828443191190634694037855217779295145
    36123272525000296071075082563815656710885258350721
    45876576172410976447339110607218265236877223636045
    17423706905851860660448207621209813287860733969412
    81142660418086830619328460811191061556940512689692
    51934325451728388641918047049293215058642563049483
    62467221648435076201727918039944693004732956340691
    15732444386908125794514089057706229429197107928209
    55037687525678773091862540744969844508330393682126
    18336384825330154686196124348767681297534375946515
    80386287592878490201521685554828717201219257766954
    78182833757993103614740356856449095527097864797581
    16726320100436897842553539920931837441497806860984
    48403098129077791799088218795327364475675590848030
    87086987551392711854517078544161852424320693150332
    59959406895756536782107074926966537676326235447210
    69793950679652694742597709739166693763042633987085
    41052684708299085211399427365734116182760315001271
    65378607361501080857009149939512557028198746004375
    35829035317434717326932123578154982629742552737307
    94953759765105305946966067683156574377167401875275
    88902802571733229619176668713819931811048770190271
    25267680276078003013678680992525463401061632866526
    36270218540497705585629946580636237993140746255962
    24074486908231174977792365466257246923322810917141
    91430288197103288597806669760892938638285025333403
    34413065578016127815921815005561868836468420090470
    23053081172816430487623791969842487255036638784583
    11487696932154902810424020138335124462181441773470
    63783299490636259666498587618221225225512486764533
    67720186971698544312419572409913959008952310058822
    95548255300263520781532296796249481641953868218774
    76085327132285723110424803456124867697064507995236
    37774242535411291684276865538926205024910326572967
    23701913275725675285653248258265463092207058596522
    29798860272258331913126375147341994889534765745501
    18495701454879288984856827726077713721403798879715
    38298203783031473527721580348144513491373226651381
    34829543829199918180278916522431027392251122869539
    40957953066405232632538044100059654939159879593635
    29746152185502371307642255121183693803580388584903
    41698116222072977186158236678424689157993532961922
    62467957194401269043877107275048102390895523597457
    23189706772547915061505504953922979530901129967519
    86188088225875314529584099251203829009407770775672
    11306739708304724483816533873502340845647058077308
    82959174767140363198008187129011875491310547126581
    97623331044818386269515456334926366572897563400500
    42846280183517070527831839425882145521227251250327
    55121603546981200581762165212827652751691296897789
    32238195734329339946437501907836945765883352399886
    75506164965184775180738168837861091527357929701337
    62177842752192623401942399639168044983993173312731
    32924185707147349566916674687634660915035914677504
    99518671430235219628894890102423325116913619626622
    73267460800591547471830798392868535206946944540724
    76841822524674417161514036427982273348055556214818
    97142617910342598647204516893989422179826088076852
    87783646182799346313767754307809363333018982642090
    10848802521674670883215120185883543223812876952786
    71329612474782464538636993009049310363619763878039
    62184073572399794223406235393808339651327408011116
    66627891981488087797941876876144230030984490851411
    60661826293682836764744779239180335110989069790714
    85786944089552990653640447425576083659976645795096
    66024396409905389607120198219976047599490197230297
    64913982680032973156037120041377903785566085089252
    16730939319872750275468906903707539413042652315011
    94809377245048795150954100921645863754710598436791
    78639167021187492431995700641917969777599028300699
    15368713711936614952811305876380278410754449733078
    40789923115535562561142322423255033685442488917353
    44889911501440648020369068063960672322193204149535
    41503128880339536053299340368006977710650566631954
    81234880673210146739058568557934581403627822703280
    82616570773948327592232845941706525094512325230608
    22918802058777319719839450180888072429661980811197
    77158542502016545090413245809786882778948721859617
    72107838435069186155435662884062257473692284509516
    20849603980134001723930671666823555245252804609722
    53503534226472524250874054075591789781264330331690
    '''
    num = '''37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690
    '''
    return int(str(sum(map(lambda x: int(x), num.split())))[:10])


def problem14():
    '''
    Longest Collatz sequence

    Problem 14
    The following iterative sequence is defined
    for the set of positive integers:

    n → n/2 (n is even)
    n → 3n + 1 (n is odd)

    Using the rule above and starting with 13,
    we generate the following sequence:

    13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
    It can be seen that this sequence (starting at 13 and finishing at 1)
    contains 10 terms. Although it has not been proved yet (Collatz Problem),
    it is thought that all starting numbers finish at 1.

    Which starting number, under one million, produces the longest chain?

    NOTE: Once the chain starts the terms are allowed to go above one million.
    '''

    def even(n): return n / 2

    def odd(n): return 3 * n + 1

    def seq(n, original, c=dict(), step=1):
        tmp = c.get(n, -1)
        if tmp > 0:
            c[original] = tmp + step
            return tmp + step
        elif n == 1:
            c[original] = step
            return step
        elif n % 2 == 0:
            return seq(even(n), original, c, step + 1)
        else:
            return seq(odd(n), original, c, step + 1)

    len_chains = [(n, seq(n, n)) for n in range(1, 1000000)]
    return max(len_chains, key=lambda x: x[1])[0]


def problem15():
    '''
    Lattice paths

    Problem 15
    Starting in the top left corner of a 2×2 grid,
    and only being able to move to the right and down,
    there are exactly 6 routes to the bottom right corner.

    How many such routes are there through a 20×20 grid?
    '''
    edge = 20
    return binomial_coefficient(edge * 2, edge)


def binomial_coefficient(n, k):
    return factorial(n) / (factorial(k) * factorial(n - k))


def factorial(n):
    return reduce(mul, range(n, 1, -1))


def problem16():
    '''
    Power digit sum

    Problem 16
    2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

    What is the sum of the digits of the number 2^1000?
    '''
    return sum(map(lambda x: ord(x) - ord('0'), str(pow_fun(2, 1000))))


def problem18():
    '''
    Maximum path sum I

    Problem 18
    By starting at the top of the triangle below
    and moving to adjacent numbers on the row below,
    the maximum total from top to bottom is 23.

    3
    7 4
    2 4 6
    8 5 9 3

    That is, 3 + 7 + 4 + 9 = 23.

    Find the maximum total from top to bottom of the triangle below:

    75
    95 64
    17 47 82
    18 35 87 10
    20 04 82 47 65
    19 01 23 75 03 34
    88 02 77 73 07 63 67
    99 65 04 28 06 16 70 92
    41 41 26 56 83 40 80 70 33
    41 48 72 33 47 32 37 16 94 29
    53 71 44 65 25 43 91 52 97 51 14
    70 11 33 28 77 73 17 78 39 68 17 57
    91 71 52 38 17 14 91 43 58 50 27 29 48
    63 66 04 68 89 53 67 30 73 16 69 87 40 31
    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

    NOTE: As there are only 16384 routes,
    it is possible to solve this problem by trying every route.
    However, Problem 67, is the same challenge with a triangle containing
    one-hundred rows; it cannot be solved by brute force,
    and requires a clever method! ;o)
    '''
    triangle = map(lambda x: map(lambda y: int(y), x.split()), '''75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'''.splitlines())
    rev = triangle[::-1]
    for i, a in enumerate(rev):
        for b in range(len(a) - 1):
            rev[i + 1][b] += a[b] if a[b] > a[b + 1] else a[b + 1]
    return rev[-1][-1]


def problem19():
    '''
    Counting Sundays

    Problem 19
    You are given the following information,
    but you may prefer to do some research for yourself.

    1 Jan 1900 was a Monday.
    Thirty days has September,
    April, June and November.
    All the rest have thirty-one,
    Saving February alone,
    Which has twenty-eight, rain or shine.
    And on leap years, twenty-nine.
    A leap year occurs on any year evenly divisible by 4,
    but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during
    the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    '''
    from datetime import date
    dates = [(y, m)
             for y in range(1901, 2001)
             for m in range(1, 13)
             if date(y, m, 1).weekday() == 6]
    return len(dates)


def problem20():
    '''
    Factorial digit sum

    Problem 20
    n! means n × (n − 1) × ... × 3 × 2 × 1

    For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
    and the sum of the digits in
    the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

    Find the sum of the digits in the number 100!
    '''
    return sum(map(lambda a: int(a), str(factorial(100))))


def problem21():
    '''
    Amicable numbers

    Problem 21
    Let d(n) be defined as the sum of proper divisors of n
    (numbers less than n which divide evenly into n).
    If d(a) = b and d(b) = a, where a ≠ b,
    then a and b are an amicable pair and each of a and b
    are called amicable numbers.

    For example, the proper divisors of 220
    are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110;
    therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71
    and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.
    '''
    return sum([x for x in range(1, 10001) if amicable(x)])


def amicable(number):
    b = sum(divisors(number))
    return sum(divisors(b)) == number and b != number


def divisors(number):
    return [x for x in range(1, number / 2 + 1)if number % x == 0]


def problem22():
    '''
    Names scores

    Problem 22
    Using names.txt (right click and 'Save Link/Target As...'),
    a 46K text file containing over five-thousand first names,
    begin by sorting it into alphabetical order.
    Then working out the alphabetical value for each name,
    multiply this value by its alphabetical position in the list to obtain
    a name score.

    For example, when the list is sorted into alphabetical order,
    COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th
    name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.

    What is the total of all the name scores in the file?
    '''
    from os import path
    d = path.dirname(path.abspath(__file__))
    f = "p022_names.txt"
    names = open(path.join(d, f)).read().replace("\"", "").split(",")
    a = ord('A')

    def char_to_int(c): return ord(c) - a + 1

    def name_sum(name): return sum(map(char_to_int, name))

    def mul_key_value(entry): return entry[0] * entry[1]

    return sum(map(mul_key_value, enumerate(map(name_sum, sorted(names)), 1)))


def problem23():
    '''
    Non-abundant sums

    Problem 23
    A perfect number is a number for which the sum of its proper divisors
    is exactly equal to the number.
    For example, the sum of the proper divisors of 28
    would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

    A number n is called deficient if the sum of its proper divisors
    is less than n and it is called abundant if this sum exceeds n.

    As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16,
    the smallest number that can be written as the sum of two
    abundant numbers is 24. By mathematical analysis,
    it can be shown that all integers greater than 28123 can be written
    as the sum of two abundant numbers. However,
    this upper limit cannot be reduced any further by analysis even though it
    is known that the greatest number that cannot be expressed
    as the sum of two abundant numbers is less than this limit.

    Find the sum of all the positive integers which cannot be written
    as the sum of two abundant numbers.
    '''

    def non_abundant_sum(abundant_numbers, last_abundant):
        cache = set()
        for a in abundant_numbers:
            for b in abundant_numbers:
                tmp = a + b
                if tmp > last_abundant:
                    break
                else:
                    cache.add(tmp)
        return set(range(1, last_abundant)) - cache

    def abundants(last_abundant):
        return [x for x in range(1, last_abundant + 1) if is_abundant(x)]

    def compute(last_abundant):
        return non_abundant_sum(abundants(last_abundant), last_abundant)

    return sum(compute(28123))


def is_abundant(number): return sum(divisors(number)) > number


def problem24():
    '''
    @see: https://projecteuler.net/problem=24
    '''
    from main.Permutation import Permutation
    i, tmp = 1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    perm = Permutation()
    while i < 1000000:
        perm.next_lexigonal_permutation(tmp)
        i += 1
    return reduce(lambda a, b: a * 10 + b, tmp)


def problem25():
    '''
    @see: https://projecteuler.net/problem=25
    '''

    def fib(a, b): return b, a + b

    a = b = 1
    c = 2
    while True:
        a, b = fib(a, b)
        if len(str(a)) == 1000:
            break
        else:
            c += 1
    return c


def problem26():
    '''
    @see: https://projecteuler.net/problem=26
    '''

    def recurring_cycle(a, b):
        z = a
        remaindes = []
        while True:
            while z < b:
                z *= 10
            rem = z % b
            if rem == 0:
                break
            if rem in remaindes:
                break
            remaindes.append(rem)
            z = 10 * rem
        return remaindes, rem

    def recurring_len(i):
        if i[1] == 0: return 0
        f = i[0]
        s = i[1]
        idx = list(f).index(s)
        return len(f[idx::])

    def recurring_len_tuples(r):
        return [(x, recurring_len(recurring_cycle(1, x))) for x in r]

    return max(recurring_len_tuples(range(1, 1000)), key=lambda x: x[1])[0]


def problem27():
    '''
    @see: https://projecteuler.net/problem=27
    '''
    limit = 1000
    a = range(-limit, limit)
    b = [k for k, v in enumerate(eratosthenes_sieve(limit)) if not v]
    ret = (0, 0)
    for x in a:
        for y in b:
            n = 0
            while True:
                tmp = n ** 2 + n * x + y
                if not tmp in b:
                    break
                n += 1
            if ret[0] < n:
                ret = (n, x * y)
    return ret[1]


def problem28():
    '''
    @see: https://projecteuler.net/problem=28
    '''
    edge = 1001
    limit = edge * edge
    tmp = last = 1
    step = 2
    while last < limit:
        for _ in range(1, 5):
            last += step
            tmp += last
        step += 2

    return tmp


def problem29():
    '''
    @see: https://projecteuler.net/problem=29
    '''
    r, cache = range(2, 100 + 1), dict()
    for a in r:
        for b in r:
            cache[a ** b] = True
    return len(cache)


def problem30():
    '''
    @see: https://projecteuler.net/problem=30
    '''

    def nums(i, cache):
        if i > 0:
            cache.insert(0, i % 10)
            return nums(i / 10, cache)
        else:
            return cache

    def powed(i): return sum([x ** 5 for x in nums(i, list())])

    return sum([x for x in range(2, 10 ** 6) if x == powed(x)])


def problem31():
    '''
    @see. https://projecteuler.net/problem=31
    '''
    from main.Solver import CoinSolver
    cs = CoinSolver([1, 2, 5, 10, 20, 50, 100, 200], 200)
    return cs.solve()


def problem32():
    '''
    @see: https://projecteuler.net/problem=32
    '''
    _digits = "123456789"
    cache = set()

    for a in range(1, 1000):
        for b in range(1, 10000):
            c = "{}{}{}".format(a, b, a * b)
            if len(c) == 9 and "".join(sorted(c)) == _digits:
                cache.add(a * b)
            elif len(c) > 9:
                break

    return sum(cache)


def problem33():
    '''
    @see: https://projecteuler.net/problem=33
    '''
    from fractions import gcd

    num = den = 1
    for d in range(10, 100):
        for n in range(10, d):
            d0, d1 = divmod(d, 10)
            n0, n1 = divmod(n, 10)
            if (d0 == n1 and d1 * n == n0 * d) or \
            (d1 == n0 and d0 * n == n1 * d):
                num *= n
                den *= d

    return den // gcd(den, num)


def problem34():
    '''
    @see: https://projecteuler.net/problem=34
    '''

    def factorial(num):
        return reduce(mul, range(1, num + 1)) if num > 1 else 1

    def numbers(num):
        while num:
            yield num % 10
            num /= 10

    def curious(num):
        return num == sum(factorial(digit) for digit in numbers(num))

    return sum([num for num in range(3, factorial(9) + 1) if curious(num)])


def problem35():
    '''
    @see: https://projecteuler.net/problem=35
    '''
    from collections import deque

    def to_digits(numb):
        cache = []

        while numb:
            numb, digit = divmod(numb, 10)
            cache.append(digit)

        return cache

    def to_int(digits):
        return reduce(lambda x, y: x * 10 + y, digits)

    def analyze(digits):
        dq = deque(digits)

        for _ in range(len(dq)):
            if sieve[to_int(dq)]:
                return False
            dq.rotate()

        return True

    limit = 1000000
    sieve = eratosthenes_sieve(limit)

    return len([numb for numb in range(1, limit) if analyze(to_digits(numb))])


def problem36():
    '''
    @see: https://projecteuler.net/problem=36
    '''

    def int_to_bin(a):
        return "{0:b}".format(a)

    def is_palindrome(a):
        tmp = str(a)
        return tmp == tmp[::-1]

    c = [(a, int_to_bin(a)) for a in range(1, 1000000)]
    f = filter(lambda x: is_palindrome(x[0]) and is_palindrome(x[1]), c)
    return sum([a[0] for a in f])


def problem37():
    '''
    @see: https://projecteuler.net/problem=37
    '''
    limit = 1000000

    def truncatable_left(item, sieve):
        tmp = str(item)

        for i in range(len(tmp)):
            if sieve[int(tmp[i::])]:
                return False

        return True

    def truncatable_right(item, sieve):
        tmp = str(item)
        lenght = len(tmp)

        for i in range(lenght):
            if sieve[int(tmp[:lenght - i])]:
                return False

        return True

    def truncatable(sieve):
        return [i for i in range(10, len(sieve))
                if truncatable_left(i, sieve) and truncatable_right(i, sieve)]

    return sum(truncatable(eratosthenes_sieve(limit)))


def problem38():
    '''
    @see: https://projecteuler.net/problem=38
    '''
    all_digit = ['1', '2', '3', '4', '5', '6', '7', '8', '9']

    def is_pandigita(number):
        return all_digit == sorted(str(number))

    def try_check(number):
        return len(str(number)) == 9

    def not_posible_pandigital(number):
        return len(str(number)) > 9

    results = dict()
    for base in xrange(1, 10 ** 5):
        tmp = base
        for idx in range(2, 10):
            tmp = int("{}{}".format(tmp, base * idx))
            if not_posible_pandigital(tmp):
                break
            if try_check(tmp) and is_pandigita(tmp):
                results[base] = tmp
    return sorted(results.items(), key=lambda x: x[1])[-1][1]


def problem39():
    '''
    @see: https://projecteuler.net/problem=39
    '''

    def pythagoras(a, b, c):
        return c * c == a * a + b * b

    result = (0, 0)
    for perimeter in xrange(1, 1001):
        count = 0

        for a in xrange(1, perimeter // 3):
            for b in xrange(a + 1, perimeter // 2):
                c = perimeter - a - b

                if pythagoras(a, b, c):
                    count += 1

                if c <= 0:
                    break

        if result[1] < count:
            result = (perimeter, count)

    return result[0]


def problem40():
    '''
    @see: https://projecteuler.net/problem=40
    '''
    cache = "".join([str(x) for x in xrange(1, 10 ** 6 + 1)])

    result = 1
    for idx in xrange(7):
        result *= int(cache[10 ** idx - 1])
    return result


def problem41():
    '''
    @see: https://projecteuler.net/problem=41
    '''
    from collections import deque
    from main.Permutation import Permutation

    result = 0
    perm = Permutation()

    def collection_to_int(col):
        return reduce(lambda x, y: x * 10 + y, col)

    for c in range(2, 10):
        d = deque(range(1, c + 1))
        while perm.next_lexigonal_permutation(d):
            value = collection_to_int(d)
            if is_prime(value):
                result = value

    return result


def problem42():
    '''
    @see: https://projecteuler.net/problem=42
    '''
    from os import path
    from math import sqrt

    def is_triangle(n):
        x = (sqrt(8 * n + 1) - 1) / 2
        return x - int(x) == 0

    def char_to_int(c):
        return ord(c) - a_ord + 1

    a_ord = ord("A")
    f = path.join(path.dirname(path.abspath(__file__)), "p42.txt")

    counter = 0
    for item in open(f).read().replace('"', "").split(","):
        if is_triangle(sum([char_to_int(c) for c in item])):
            counter += 1

    return counter


def problem43():
    '''
    @see: https://projecteuler.net/problem=43
    '''
    from main.Permutation import Permutation

    def arr_to_num(a, b, c, arr):
        return arr[a] * 100 + arr[b] * 10 + arr[c]

    def check(arr):
        if arr_to_num(1, 2, 3, arr) % 2 != 0:
            return False
        if arr_to_num(2, 3, 4, arr) % 3 != 0:
            return False
        if arr_to_num(3, 4, 5, arr) % 5 != 0:
            return False
        if arr_to_num(4, 5, 6, arr) % 7 != 0:
            return False
        if arr_to_num(5, 6, 7, arr) % 11 != 0:
            return False
        if arr_to_num(6, 7, 8, arr) % 13 != 0:
            return False
        if arr_to_num(7, 8, 9, arr) % 17 != 0:
            return False
        return True

    perm = Permutation()
    pandigital = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    result = 0

    while True:
        if check(pandigital):
            result += reduce(lambda a, b: a * 10 + b, pandigital)

        if not perm.next_lexigonal_permutation(pandigital):
            break

    return result


def problem44():
    '''
    @see: https://projecteuler.net/problem=44
    '''
    from math import sqrt
    from collections import deque

    def is_pentagonal(n):
        x = (1 + sqrt(24 * n + 1)) / 6
        return x - int(x) == 0

    def pentagonal(n):
        return n * (3 * n - 1) / 2

    def solve():
        pentagonals, x = deque(), 1

        while True:
            p_j = pentagonal(x)

            for p_k in pentagonals:
                tmp = abs(p_j - p_k)
                if is_pentagonal(p_j + p_k) and is_pentagonal(tmp):
                    return tmp

            pentagonals.append(p_j)
            x += 1

        return -1

    return solve()


def problem45():
    '''
    @see: https://projecteuler.net/problem=45
    '''
    from math import sqrt

    def triangle(n):
        return n * (n + 1) / 2

    def is_triangle(x):
        n = (sqrt(8 * x + 1) - 1) / 2
        return n - int(n) == 0

    def is_pentagonal(x):
        n = (sqrt(24 * x + 1) + 1) / 6
        return n - int(n) == 0

    def is_hexagonal(x):
        n = (sqrt(8 * x + 1) + 1) / 4
        return n - int(n) == 0

    def solve():
        y = 286

        while True:
            x = triangle(y)
            if is_triangle(x) and is_pentagonal(x) and is_hexagonal(x):
                break
            y += 1

        return x

    return solve()


def problem46():
    from itertools import count
    result = 9
    while True:
        if not is_prime(result):
            for i in count(1):
                k = result - 2 * i * i
                if k < 0:
                    return result
                elif is_prime(k):
                    break
        result += 2
    pass


if __name__ == '__main__':
    pass
