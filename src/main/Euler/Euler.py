# coding: UTF-8

'''
Created on Mar 31, 2019

@see: https://projecteuler.net/
@author: hlubyluk
'''


def problem1():
    '''
    Multiples of 3 and 5
    Problem 1
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    '''
    return sum([x for x in range(1, 1000) if x % 3 == 0 or x % 5 == 0])


def problem2():
    '''
    Even Fibonacci numbers
    Problem 2
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    '''
    fibonacci = [1, 2]
    while True:
        fibonacci_next = fibonacci[-2] + fibonacci[-1]
        if fibonacci_next >= 4000000:
            break
        fibonacci.append(fibonacci_next)
    return sum(filter(lambda item: item % 2 == 0, fibonacci))


def problem3():
    '''
    Largest prime factor

    Problem 3
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143?
    '''
    number, now = 600851475143, 2
    while number > 1:
        if number % now == 0:
            number /= now
        else:
            now += 1
    return now


def is_palindrome(items):
    return items == items[::-1]


def problem4():
    '''
    Largest palindrome product
    
    Problem 4
    A palindromic number reads the same both ways.
    The largest palindrome made from the product of two 2-digit numbers
    is 9009 = 91 × 99.
    
    Find the largest palindrome made from the product of two 3-digit numbers.
    '''
    return sorted([a * b for a in range(100, 1001) for b in range(100, 1001)
                  if is_palindrome(str(a * b))])[-1]


def problem5():
    '''
    Smallest multiple

    Problem 5
    2520 is the smallest number that can be divided by each of the numbers
    from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by
    all of the numbers from 1 to 20?
    '''
    cache = dict()
    for x in range(2, 20 + 1):
        for k, v in prime_factorization(x).items():
            tmp = cache.get(k, 0)
            cache[k] = max(tmp, v)
    return reduce(mul, map(pow_tupple, cache.items()))


def prime_factorization(number):
    cache = dict()

    factor = 2
    x = number

    while x > 1:
        if x % factor == 0:
            tmp = cache.get(factor, 0)
            cache[factor] = tmp + 1
            x //= factor
        else:
            factor += 1

    return cache


def mul(a, b): return a * b


def pow_tupple(a): return a[0] ** a[1]


def problem6():
    '''
    Sum square difference

    Problem 6
    The sum of the squares of the first ten natural numbers is,

    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,

    (1 + 2 + ... + 10)^2 = 552 = 3025
    Hence the difference between the sum of the squares of the
    first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

    Find the difference between the sum of the squares of
    the first one hundred natural numbers and the square of the sum.
    '''
    r = range(1, 101)
    return pow_fun(sum(r), 2) - sum(map(lambda a: pow_fun(a, 2), r))


def pow_fun(a, b): return a ** b


def problem7():
    '''
    10001st prime

    Problem 7
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
    we can see that the 6th prime is 13.

    What is the 10 001st prime number?
    '''
    count, i = 0, 1
    while True:
        count += (0, 1)[is_prime(i)]
        if count == 10001:
            return i
        i += 1

    return 0


def is_prime(n):
    if n < 2:
        return False

    if n == 2:
        return True

    if n % 2 == 0:
        return False

    tmp = 3
    while tmp * tmp <= n:
        if n % tmp == 0:
            return False

        tmp += 2

    return True


def problem8():
    '''
    Largest product in a series

    Problem 8
    The four adjacent digits in the 1000-digit number that
    have the greatest product are 9 × 9 × 8 × 9 = 5832.

    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450

    Find the thirteen adjacent digits in the 1000-digit number that
    have the greatest product. What is the value of this product?
    '''
    number = '''73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
    '''
    n = map(lambda a: ord(a) - ord('0'), list(number.replace("\n", "")))
    return max([reduce(mul, n[a:a + 13]) for a in range(len(n) - 13)])


def problem9():
    '''
    Special Pythagorean triplet

    Problem 9
    A Pythagorean triplet is a set of three natural numbers,
    a < b < c, for which,

    a^2 + b^2 = c^2
    For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    '''
    limit = 1000
    for a in range(1, limit):
        for b in range(a + 1, limit - a):
            c = limit - a - b
            if a ** 2 + b ** 2 == c ** 2 and a < b and b < c:
                return a * b * c
    return 0


def problem10():
    '''
    Summation of primes

    Problem 10
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

    Find the sum of all the primes below two million.
    '''
    sieve_enum = enumerate(eratosthenes_sieve(2000000))
    sieve_filtered = filter(lambda i:not i[1], sieve_enum)
    primes = map(lambda a: a[0], sieve_filtered)
    return sum(primes)


def eratosthenes_sieve(limit):
    sieve, idx = [False] * (limit + 1), 2
    sieve[0] = sieve[1] = True

    while idx * idx < limit:
        for i in range(idx * 2, limit + 1, idx):
            sieve[i] = True
        
        while True:
            idx += 1

            if not sieve[idx]:
                break

    return sieve


def problem11():
    '''
    Largest product in a grid

    Problem 11
    In the 20×20 grid below, four numbers along a diagonal line
    have been marked in red.

    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

    What is the greatest product of four adjacent numbers
    in the same direction (up, down, left, right, or diagonally)
    in the 20×20 grid?
    '''
    matrix = map(lambda f: int(f), '''
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'''.split())
    e_m, e_s_m = 20, 4

    def row(matrix):
        return [reduce(mul, matrix[i:i + e_s_m:])
                for i in range(e_m * e_m - e_s_m + 1)]

    def column(matrix):
        return [reduce(mul, matrix[i::e_m][j:j + e_s_m:])
                       for i in range(e_m)
                       for j in range(e_m - e_s_m + 1)]

    def other(matrix):

        def compose(rows):
            return [rows[i + k][j + k]
             for i in range(e_m - e_s_m + 1)
             for j in range(e_m - e_s_m + 1)
             for k in range(e_s_m)]

        return diagonal_result(compose(rows(matrix)))

    def main(matrix):

        def compose(rows):
            return [rows[i - e_s_m + k][j - k - 1]
                    for i in range(e_s_m, e_m + 1)
                    for j in range(e_s_m, e_m + 1)
                    for k in range(e_s_m)]

        return diagonal_result(compose(rows(matrix)))

    def rows(matrix):
        return [matrix[i * e_m:i * e_m + e_m:] for i in range(e_m)]

    def diagonal_result(composed):
        return [reduce(mul, composed[i:i + e_s_m:])
                for i in range(len(composed))]

    t = []
    t.extend(main(matrix))
    t.extend(column(matrix))
    t.extend(other(matrix))
    t.extend(main(matrix))
    return max(t)


if __name__ == '__main__':
    # print(problem1())
    # print(problem2())
    # print(problem3())
    # print(problem4())
    # print(problem5())
    # print(problem6())
    # print(problem7())
    # print(problem8())
    # print(problem9())
    # print(problem10())
    # print(problem11())
    pass
