'''
Created on Nov 3, 2018

@author: HlubyLuk
'''
from abc import ABC, abstractmethod
from _functools import reduce
import math


class Problem(ABC):

    @abstractmethod
    def solve(self):
        '''
        Problem solve method.
        '''
        raise NotImplementedError('subclasses must override solve() method!')

    def lcm(self, r=[]):
        '''
        Least common multiple.
        :r `range` for analyze.
        :return `int` of least common multiple.
        '''
        cache = dict()

        for item in r:
            for k, v in self.prime_factors(item).items():
                tmp = cache.get(k, 0)
                if tmp < v:
                    cache.update({k: tmp + v - tmp})

        return reduce(lambda a, b: a * b,
                      map(lambda x: math.pow(x[0], x[1]), cache.items()))

    def prime_factors(self, x):
        '''
        Prime factors of number.
        :return `dict` where key is number, value is how many times.
        '''
        cache = dict()
        number = x
        factor = 2

        while number > 1:
            while number % factor == 0:
                number /= factor
                tmp = cache.get(factor, 0)
                cache.update({factor: tmp + 1})

            factor += 1

        return cache

    def is_palindromic(self, number):
        '''
        Is number same from start to end and end to start.
        :return `True` is same, otherwise `False`
        '''
        return str(number) == str(number)[::-1]


class Problem1(Problem):
    '''
    Multiples of 3 and 5
    Problem 1 
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    '''

    def solve(self):
        return sum([x for x in range(1, 1000, 1) if x % 3 == 0 or x % 5 == 0])


class Problem2(Problem):
    '''
    Even Fibonacci numbers
    Problem 2 
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    '''

    def solve(self):
        fibonacci = [1, 2]

        while True:
            index = len(fibonacci)
            x = fibonacci[index - 2] + fibonacci[index - 1]
            fibonacci.append(x)

            if x >= 4000000:
                break

        return sum(filter(lambda x: x % 2 == 0, fibonacci))


class Problem3(Problem):
    '''
    Largest prime factor
    Problem 3 
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    '''

    def solve(self):
        return sorted(self.prime_factors(600851475143).keys())[-1]


class Problem4(Problem):
    '''
    Largest palindrome product
    Problem 4 
    A palindromic number reads the same both ways. The largest palindrome made
    from the product of two 2-digit numbers is 9009 = 91 × 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    '''

    def solve(self):
        r = range(999, 99, -1)

        return sorted([x * y for x in r for y in r
                       if self.is_palindromic(x * y)])[-1]


class Problem5(Problem):
    '''
    Smallest multiple
    Problem 5 
    2520 is the smallest number that can be divided by each of the numbers
    from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the
    numbers from 1 to 20?
    '''

    def solve(self):
        return self.lcm([x for x in range(1, 21, 1)])


class Problem6(Problem):
    '''
    Sum square difference
    Problem 6
    The sum of the squares of the first ten natural numbers is,

    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,

    (1 + 2 + ... + 10)^2 = 552 = 3025
    Hence the difference between the sum of the squares of the first ten
    natural numbers and the square of the sum is 3025 − 385 = 2640.

    Find the difference between the sum of the squares of the first one hundred
    natural numbers and the square of the sum.
    '''

    def solve(self):
        seq = [x for x in range(1, 101, 1)]

        return math.pow(sum(seq), 2) - sum(map(lambda x: math.pow(x, 2), seq))


if __name__ == '__main__':
    pass
